name: Docker Build, Push, and Deploy to EC2

# Define global environment variables
env:
  DOCKER_REPO_NAME: flaskCI  # Define your repository name here

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO_NAME }}

      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push  # Wait for the build-and-push job to complete

    steps:
      # SSH into the EC2 instance and deploy the Docker container
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1
        with:
          host: 13.48.249.104  # Public IP or DNS of the EC2 instance
          username: ubuntu  # SSH username (e.g., "ubuntu" for Ubuntu AMI)
          key: ${{ secrets.EC2_SSH_KEY }}  # SSH private key
          script: |
            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:latest

            # Stop and remove the existing container (if any)
            docker stop your-container-name || true
            docker rm your-container-name || true

            # Run the new container
            docker run -d \
              --name your-container-name \
              -p 5000:5000 \  # Map port 80 on the host to port 80 in the container
              ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:latest
